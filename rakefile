# A part of Elten - EltenLink / Elten Network desktop client.
# Copyright (C) 2014-2021 Dawid Pieper
# Elten is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 3.
# Elten is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with Elten. If not, see <https://www.gnu.org/licenses/>.

if RUBY_VERSION.split(".")[0..2].join(".") != "3.0.1"
  raise("Ruby version 3.0.1 is required.")
end
if RUBY_PLATFORM != "i386-mingw32"
  raise("Ruby platform i386-mingw32 is required.")
end

require "rubygems"
require("zlib")
require("io/console")
require("securerandom")
require("digest/sha1")
require("open3")
require("json")
require "fiddle"

kernel32 = Fiddle.dlopen("kernel32")
setDllDirectoryW = Fiddle::Function.new(kernel32["SetDllDirectoryW"], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)
path = File.dirname(__FILE__).gsub("/", "\\") + "\\vendor\\app\\bin"
setDllDirectoryW.call(path.encode(Encoding::UTF_16LE))

def install_gem(gemname)
  require "rubygems/commands/install_command"
  cmd = Gem::Commands::InstallCommand.new
  cmd.handle_options [gemname]
  begin
    cmd.execute
  rescue SystemExit
  end
  Gem.clear_paths
end

def require_gem(gemName, requiredPath)
  ge = false
  begin
    require requiredPath
  rescue Exception
    if ge == false
      ge = true
      puts("#{gemName}  not found, trying to install")
      install_gem(gemName)
      retry
    else
      fail
    end
  end
end

def get_files(filelist)
  res = []
  lines = IO.readlines(filelist)
  for l in lines
    l.strip!
    next if l == "" || l[0..0] == "#"
    res.push(l)
  end
  return res
end

def locate_iscc
  locations = [ENV["ProgramFiles"] + "\\Inno Setup 6", ENV["localappdata"] + "\\Programs\\Inno Setup 6"] + ENV["path"].split(";").map { |c| c.chop! if c[-1..-1] == "\\" }
  for loc in locations
    l = loc + "\\iscc.exe"
    return l if FileTest.exists?(l)
  end
  return nil
end

desc "Create translation template"
task :pot do
  require_gem("gettext", "gettext/tools/xgettext")
  Dir.mkdir("locale") if !FileTest.exists?("locale")
  files = get_files("filelist_rgss")
  param = files + ["-o", "locale/elten.pot", "--package-name=Elten", "--package-version=2.4", "--msgid-bugs-address=dawidpieper@o2.pl", "--copyright-holder=\"Dawid Pieper\"", "--copyright-year=#{Time.now.year}"]
  GetText::Tools::XGetText.run(*param)
  puts("Translations saved.")
end

desc "Build scripts for RGSS"
task :rgss do
  Dir.mkdir("out") if !FileTest.exists?("out")
  Dir.mkdir("out/Data") if !FileTest.exists?("out/Data")
  files = get_files("filelist_rgss")
  i = 0
  data = files.map { |f|
    i += 1
    fname = File.basename(f).split(".")[0...-1].join(".")
    d = f.split("/")[1...-1].join("/")
    fname += "{" + d + "}" if d != nil
    [i, fname, Zlib::Deflate.deflate(IO.read(f))]
  }
  IO.binwrite("out/Data/elten.edb", Marshal.dump(data))
  puts("RGSS data saved.")
end

desc "Build scripts for agent"
task :agent do
  reqgems = [["http/2", "http-2"], ["xz", "ruby-xz"], ["zstd-ruby", "zstd-ruby"], ["base62", "base62"]]
  for r in reqgems
    require_gem(r[1], r[0])
  end

  class AgentExporter
    def initialize(file)
      @file = file
    end

    def run
      @res = []
      @cnt = "$LOAD_PATH<<\".\"\r\n$VERBOSE=nil\r\n"
      @soes = []
      @soeloc = []
      @reqs = []
      @rels = []
      search(@file)
      Dir.mkdir("out") if !FileTest.exists?("out")
      Dir.mkdir("out/sofiles") if !FileTest.exists?("out/sofiles")
      @cnt.delete!("\r")
      @cnt.gsub!(" # :nodoc:", "#")
      @cnt.gsub!(/^([\t ]*)\#([a-zA-Z0-9\t ]+)([^\n]+)$/, "")
      @cnt.gsub!(/^([ \t]*)\#([ \t]*)$/, "")
      @cnt.gsub!(/\n(\n+)/, "\n")
      @cnt.gsub!(/\n([ \t]+)/, "\n")
      IO.write("out/agent.dat", @cnt)
      for i in 0...@soes.size
        file = File.basename(@soes[i])
        loc = @soeloc[i]
        FileUtils.cp(loc, "out/sofiles/" + file)
      end
    end

    private

    def search(file)
      return processfile("agent/" + file) if FileTest.exists?("agent/" + file)
      3.times { file.chop! } if file[-3..-1] == ".rb" or file[-3..-1] == ".so"
      suc = false
      for pa in $LOAD_PATH
        s = false
        if File.file?(pa + "/" + file) or FileTest.exists?(pa + "/" + file + ".rb")
          processfile(pa + "/" + file + ".rb") if s == false
          s = true
          suc = true
        elsif FileTest.exists?(pa + "/" + file + ".so")
          suc = true
          if !@soes.include?(file + ".so")
            @soes.push(file + ".so")
            @soeloc.push(pa + "/" + file + ".so")
            @cnt += "\nrequire(\"./#{File.basename(file)}\")\n"
            ""
          else
            return ""
          end
        end
      end
      if suc == false
        for fl in Gem.find_files(file)
          if fl[-3..-1] == ".rb"
            processfile(fl)
            suc = true
          elsif fl[-3..-1] == ".so"
            if !@soes.include?(file + ".so")
              @soes.push(file + ".so")
              @soeloc.push(fl)
              @cnt += "\nrequire(\"./#{File.basename(file)}\")\n"
              ""
            else
              return ""
            end
            suc = true
          end
        end
      end
      if suc == false
        # A small workaround for rescue in JSON library
        if file != "json/pure"
          raise("Could not find file #{file}, are all required gems installed?")
        end
      end
      return ""
    end

    def processfile(file)
      @res ||= []
      return "" if @res.include?(file)
      @res.push(file)
      r = IO.read(file)
      r.gsub!(/require( *)(\(*)(\"|\')([^\"\']+)(\"|\')(\)*)/) do
        search($4)
        ""
      end
      r.gsub!(/require_relative( *)(\(*)(\"|\')([^\"\']+)(\"|\')(\)*)/) do
        f = $4
        f += ".rb" if f[-3..-1] != ".rb"
        if !@rels.include?(f) && FileTest.exists?(File.dirname(file) + "/" + f)
          @rels.push(f)
          processfile(File.dirname(file) + "/" + f)
        end
        ""
      end
      r.gsub!("require lib", "")
      @cnt += "\r\n" + r + "\r\n"
      @res.push(r)
      #    rescue Exception
      #      puts("Failed to process file #{file}")
      #      exit
    end
  end

  AgentExporter.new("agent.rb").run
  # A small workaround for a bit confusing JSON libraries
  jparser = IO.binread("out/sofiles/parser.so")
  jparser.gsub!("json/common", "parser\0\0\0\0\0")
  IO.binwrite("out/sofiles/parser.so", jparser)
  jgenerator = IO.binread("out/sofiles/generator.so")
  jgenerator.gsub!("json/common", "generator\0\0")
  IO.binwrite("out/sofiles/generator.so", jgenerator)
  puts("Agent data saved.")
end

desc "Generate data files from JSON"
task :data do
  if !FileTest.exists?("vendor/app")
    raise("Cannot locate vendor dependencies, did you remember to update git submodules?")
  end
  Dir.mkdir("out") if !FileTest.exists?("out")
  Dir.mkdir("out/jdata") if !FileTest.exists?("out/jdata")
  for f in Dir.glob("vendor/Data/*.json")
    j = JSON.load(IO.binread(f))
    o = Zlib::Deflate.deflate(Marshal.dump(j), Zlib::BEST_COMPRESSION)
    fname = File.basename(f, File.extname(f)) + ".dat"
    IO.binwrite("out/jdata/#{fname}", o)
  end
  puts("JSON data saved.")
end

desc "Generate new key for Elten app"
task :key do
  if FileTest.exists?("private/appkey.dat")
    raise("The key file for this app already exists in private/appkey.dat. You must delete it manually.")
  end
  Dir.mkdir("private") if !FileTest.exists?("private")
  secret = SecureRandom.bytes(32)
  IO.binwrite("private/appkey.dat", secret)
  puts("New app key generated.")
end

desc "Generate signature files for Elten library"
task :sig do
  if !FileTest.exists?("private/appkey.dat")
    raise("You must generate the appkey first, use \"rake key\".")
  end
  if !FileTest.exists?("vendor/app")
    raise("Cannot locate vendor dependencies, did you remember to update git submodules?")
  end
  Dir.mkdir("private/include") if !FileTest.exists?("private/include")
  sigs = ["vendor/app/elten.exe", "vendor/app/bin/rubyw.exe", "vendor/app/bin/ruby.exe"]
  str = "#ifndef ELTAUTOGEN_SIG\n#define ELTAUTOGEN_SIG\n"
  for i in 1..4
    str += "#define SHA_SIG#{i} \""
    sha = ""
    sha = Digest::SHA1.digest(sigs[i - 1]) if sigs[i - 1] != nil
    for i in 0...sha.size
      str += "\\x" + sha.getbyte(i).to_s(16).rjust(2, "0")
    end
    str += "\"\n"
  end
  str += "#endif"
  IO.binwrite("private/include/autogen_sig.h", str)
  key = IO.binread("private/appkey.dat")
  bs = []
  (16380 - key.bytesize).times {
    bs.push(SecureRandom.random_number(256))
  }
  rands = []
  for i in 0...key.bytesize
    r = nil
    r = rand(bs.size + i) while r == nil || rands.include?(r)
    rands.push(r)
  end
  rands.sort!
  bytes = (0...32).to_a.shuffle
  for i in 0...rands.size
    bs.insert(rands[i], key.getbyte(bytes[i]))
  end
  str = "#ifndef ELTAUTOGEN_SEC\n#define ELTAUTOGEN_SEC\n#define SECR \""
  for b in bs
    str += "\\x" + b.to_s(16).rjust(2, "0")
  end
  str += "\"\n#define genkey(s,key) if(1){ "
  for i in (0...32).to_a.shuffle
    str += "key[#{bytes[i].to_s}]=s[#{rands[i].to_s}];"
  end
  str += " }\n#endif"
  IO.binwrite("private/include/autogen_secr.h", str)
  puts("Signature generated.")
end

desc "Build Elten library"
task :lib do
  if !FileTest.exists?("vendor/vswhere.exe")
    raise("Cannot locate VSWhere executable, did you remember to update git submodules?")
  end
  Rake::Task["sig"].invoke if !FileTest.exists?("vendor/include")
  j = Open3.capture3("vendor\\vswhere.exe -format json -requires Microsoft.Component.MSBuild")[0]
  vsversions = JSON.parse(j)
  msv = nil
  for v in vsversions
    next if !v["isComplete"] || !v["isLaunchable"]
    if msv == nil
      msv = v
    else
      vers = v["installationVersion"].split(".")
      pvers = msv["installationVersion"].split(".")
      suc = true
      suc = false if vers[0].to_i < 14
      suc = false if !FileTest.exists?(v["installationPath"] + "\\MSBuild\\current\\Bin\\MSBuild.exe")
      for i in 0...vers.size
        if (pvers[i] || 0).to_i > vers[i].to_i
          suc = false
          break
        end
      end
      msv = v if suc
    end
    if msv == nil
      raise("No suitable Visual Studio version could be found, required Visual Studio 2015 or newer.")
    end
    puts("Using #{msv["displayName"]}")
    msbpath = msv["installationPath"] + "\\MSBuild\\current\\Bin\\MSBuild.exe"
    stdout = Open3.capture3("\"#{msbpath}\" lib\\eltenvc\\eltenvc.sln -nologo -m /consoleLoggerParameters:Verbosity=minimal;;errorsonly 2>&1")[0].force_encoding("utf-8")
    puts stdout if stdout != ""
    if FileTest.exists?("out/lib/eltenvc.dll")
      puts("Library compiled.")
    end
  end
end

desc "Build locale files"
task :locale do
  require_gem("gettext", "gettext")
  require "gettext/po_parser"
  require_gem("zstd-ruby", "zstd-ruby")
  Dir.mkdir("out") if !FileTest.exists?("out")
  Dir.mkdir("out/locale") if !FileTest.exists?("out/locale")
  for f in Dir.glob("locale/*/lc_messages/elten.po")
    dir = "out"
    for d in f.split("/")[0...-1]
      dir += "/" + d
      Dir.mkdir(dir) if !FileTest.exists?(dir)
    end
    parser = GetText::POParser.new
    parser.report_warning = false
    data = GetText::MO.new
    parser.parse_file(f, data)
    data.save_to_file(dir + "/elten.mo")
  end
  for f in Dir.glob("locale/**/*.md")
    dir = "out"
    for d in f.split("/")[0...-1]
      dir += "/" + d
      Dir.mkdir(dir) if !FileTest.exists?(dir)
    end
    FileUtils.copy(f, dir + "/" + File.basename(f))
  end

  def search_md(basedir, subdir = "", hash = {})
    d = Dir.entries(basedir + "/" + subdir)
    for f in d
      next if f == "." || f == ".."
      sd = subdir + "/" + f
      sd[0] = "" if sd[0] == "/"
      fd = basedir + "/" + sd
      if File.extname(f).downcase == ".md"
        hash[sd[0...-3]] = IO.binread(fd)
      elsif File.directory?(fd)
        search_md(basedir, sd, hash)
      end
    end
    return hash
  end

  hd = "".b
  cnt = "".b
  for f in Dir.entries("out/locale")
    next if !f.include?("-") && !f.bytesize != 5
    mo = "".b
    mo = IO.binread("out/locale/" + f + "/lc_messages/elten.mo") if FileTest.exists?("out/locale/" + f + "/lc_messages/elten.mo")
    hash = search_md("out/locale/" + f)
    tcnt = "".b
    tcnt += [mo.bytesize].pack("I")
    tcnt += mo
    for k in hash.keys
      next if k.bytesize > 255
      next if f != "en-GB" && FileTest.exists?("out/locale/en-GB/" + k + ".md") && IO.binread("out/locale/en-GB/" + k + ".md") == hash[k]
      tcnt += [k.bytesize, k, hash[k].bytesize, hash[k]].pack("Ca*Ia*")
    end
    zcnt = Zstd.compress(tcnt, 19)
    hd += [f[0..1] + f[3..4], zcnt.bytesize].pack("a*I")
    cnt += zcnt
  end
  Dir.mkdir("out/Data") if !FileTest.exists?("out/Data")
  fcnt = [hd.bytesize / 8].pack("C") + hd + cnt
  IO.binwrite("out/Data/locale.dat", fcnt)
  puts("Locale files compiled.")
end

desc "Create default soundtheme"
task :soundtheme do
  Dir.mkdir("out") if !FileTest.exists?("out")
  Dir.mkdir("out/Data") if !FileTest.exists?("out/Data")
  magic = "EltenSoundThemePackageFileCMPSMC"
  cnt = "".b
  for f in Dir.glob("app/Audio/**/*.ogg")
    fname = File.basename(f, ".ogg")
    s = IO.binread(f)
    cnt += [fname.bytesize, fname, s.bytesize, s].pack("Ca*Ia*")
  end
  zcnt = Zlib::Deflate.deflate(cnt, Zlib::BEST_COMPRESSION)
  fcnt = [magic, 0, 0, "", zcnt.bytesize, zcnt].pack("a*QCa*Ia*")
  IO.binwrite("out/Data/audio.elsnd", fcnt)
  puts("Default soundtheme compiled.")
end

desc "Create NVDA addon"
task :nvda do
  require_gem("rubyzip", "zip")

  class ZipFileGenerator
    def initialize(input_dir, output_file)
      @input_dir = input_dir
      @output_file = output_file
    end

    def write
      entries = Dir.entries(@input_dir) - %w[. ..]
      ::Zip::File.open(@output_file, ::Zip::File::CREATE) do |zipfile|
        write_entries entries, "", zipfile
      end
    end

    private

    def write_entries(entries, path, zipfile)
      entries.each do |e|
        zipfile_path = path == "" ? e : File.join(path, e)
        disk_file_path = File.join(@input_dir, zipfile_path)
        if File.directory? disk_file_path
          recursively_deflate_directory(disk_file_path, zipfile, zipfile_path)
        else
          put_into_archive(disk_file_path, zipfile, zipfile_path)
        end
      end
    end

    def recursively_deflate_directory(disk_file_path, zipfile, zipfile_path)
      zipfile.mkdir zipfile_path
      subdir = Dir.entries(disk_file_path) - %w[. ..]
      write_entries subdir, zipfile_path, zipfile
    end

    def put_into_archive(disk_file_path, zipfile, zipfile_path)
      zipfile.add(zipfile_path, disk_file_path)
    end
  end

  Dir.mkdir("out") if !FileTest.exists?("out")
  Dir.mkdir("out/Data") if !FileTest.exists?("out/Data")
  FileUtils.rm("out/Data/elten.nvda-addon") if FileTest.exists?("out/Data/elten.nvda-addon")
  ZipFileGenerator.new("screenreaders/NVDA", "out/Data/elten.nvda-addon").write
  puts("NVDA addon packed.")
end

desc "Build Elten"
task :build do
  if !FileTest.exists?("vendor/app")
    raise("Cannot locate vendor dependencies, did you remember to update git submodules?")
  end
  Rake::Task["lib"].invoke if !FileTest.exists?("out/lib/eltenvc.dll")
  Rake::Task["rgss"].invoke
  Rake::Task["agent"].invoke if !FileTest.exists?("out/agent.dat")
  Rake::Task["pot"].invoke if !FileTest.exists?("locale")
  Rake::Task["locale"].invoke if !FileTest.exists?("out/Data/locale.dat")
  Rake::Task["soundtheme"].invoke if !FileTest.exists?("out/Data/soundtheme.elsnd")
  Rake::Task["nvda"].invoke if !FileTest.exists?("out/Data/elten.nvda-addon")
  Rake::Task["data"].invoke if !FileTest.exists?("out/jdata")
  if !FileTest.exists?("build")
    Dir.mkdir("build") if !FileTest.exists?("build")
    Dir.mkdir("build/elten") if !FileTest.exists?("build/elten")
    FileUtils.copy_entry("vendor/app", "build/elten")
    FileUtils.copy_entry("app", "build/elten")
    FileUtils.copy_entry("out/sofiles", "build/elten/bin")
  end
  FileUtils.copy("out/agent.dat", "build/elten/bin")
  FileUtils.copy_entry("out/Data", "build/elten/Data")
  FileUtils.copy_entry("out/jdata", "build/elten/Data")
  FileUtils.copy("out/lib/eltenvc.dll", "build/elten/bin")
  puts("Elten build completed.")
end

desc "Build Elten and all dependencies"
task :buildall do
  if !FileTest.exists?("vendor/app")
    raise("Cannot locate vendor dependencies, did you remember to update git submodules?")
  end
  Rake::Task["lib"].invoke
  Rake::Task["rgss"].invoke
  Rake::Task["agent"].invoke
  Rake::Task["pot"].invoke if !FileTest.exists?("locale")
  Rake::Task["locale"].invoke
  Rake::Task["nvda"].invoke
  Rake::Task["data"].invoke
  FileUtils.rm_rf("build")
  Dir.mkdir("build")
  Dir.mkdir("build/elten")
  FileUtils.copy_entry("vendor/app", "build/elten")
  FileUtils.copy_entry("app", "build/elten")
  FileUtils.copy_entry("out/sofiles", "build/elten/bin")
  FileUtils.copy("out/agent.dat", "build/elten/bin")
  FileUtils.copy_entry("out/Data", "build/elten/Data")
  FileUtils.copy_entry("out/jdata", "build/elten/Data")
  FileUtils.copy("out/lib/eltenvc.dll", "build/elten/bin")
  puts("Elten full build completed.")
end

task :default do
  Rake::Task["build"].invoke
end

desc "Clean built data"
task :clean do
  FileUtils.rm_rf("out")
  FileUtils.rm_rf("build")
  FileUtils.rm_rf("doc")
end

desc "Build Elten and run it"
task :run do
  Rake::Task["build"].invoke
  Open3.popen3("build/elten/elten.exe")
end

desc "Build Elten with all dependencies and run it"
task :runall do
  Rake::Task["buildall"].invoke
  Open3.popen3("build/elten/elten.exe")
end

desc "Create Elten installer"
task :setup do
  Rake::Task["build"].invoke if !FileTest.exists?("build/elten")
  loc = locate_iscc
  if loc == nil
    raise("Failed to locate InnoSetup6 installation. Make sure that InnoSetup is installed in your \"Program Files\" or add it to path.")
  end
  stdout = Open3.capture3("\"#{loc}\" /q installer/instelten.iss 2>&1")[0]
  puts stdout
  puts("Installer compiled.") if stdout == ""
end

desc "Create Elten rdoc documentation"
task :doc do
  stdout = Open3.capture3("rdoc src --all --force-update 2>&1")[0]
  puts stdout
end
